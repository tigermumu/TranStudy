Yossi Gilad, Rotem Hemo, Silvio Micali, Georgios Vlachos, Nickolai Zeldovich MIT CSAIL
ABSTRACT
Algorand is a new cryptocurrency that con rms transactions with latency on the order of a minute while scaling to many users. Algorand ensures that users never have divergent views of confirmed transactions, even if some of the users are malicious and the network is temporarily partitioned. In contrast, existing cryptocurrencies allow for temporary forks and therefore require a long time, on the order of an hour, to con rm transactions with high con dence.
Algorand是一种新的加密货币，它可以在许多用户同时发起交易时，达到一分钟之内的交易确认延迟。Algorand确保用户永远不会对已经确认的交易产生分歧，即使有些用户是恶意的，并且采用临时分区的网络。相比之下，现有的加密货币允许临时分叉，因此需要很长时间确认时间（大约一小时），以判断高置信度的方式来确认交易。
Algorand uses a new Byzantine Agreement (BA) protocol to reach consensus among users on the next set of transactions. To scale the consensus to many users, Algorand uses a novel mechanism based on Veriable Random Functions that allows users to privately check whether they are selected to participate in the BA to agree on the next set of transactions, and to include a proof of their selection in their network messages. In Algorand’s BA protocol, users do not keep any private state except for their private keys, which allows Algorand to replace participants immediately after they send a message. This mitigates targeted attacks on chosen participants after their identity is revealed.
Algorand使用了新的拜占庭协议(BA)，以达成在跨用户之间建立对下一组交易的共识。
1 INTRODUCTION
Cryptographic currencies such as Bitcoin can enable new applications, such as smart contracts [24, 49] and fair pro- tocols [2], can simplify currency conversions [12], and can avoid trusted centralized authorities that regulate transac- tions. However, current proposals su er from a trade-o  between latency and con dence in a transaction. For exam- ple, achieving a high con dence that a transaction has been con rmed in Bitcoin requires about an hour long wait [7]. On the other hand, applications that require low latency cannot be certain that their transaction will be con rmed, and must trust the payer to not double-spend [45].
Double-spending is the core problem faced by any cryp- tocurrency, where an adversary holding $1 gives his $1 to two di erent users. Cryptocurrencies prevent double-spending by reaching consensus on an ordered log (“blockchain”) of transactions. Reaching consensus is di cult because of the open setting: since anyone can participate, an adversary can create an arbitrary number of pseudonyms (“Sybils”) [21], making it infeasible to rely on traditional consensus proto- cols [15] that require a fraction of honest users.
Bitcoin [41] and other cryptocurrencies [23, 53] address this problem using proof-of-work (PoW), where users must repeatedly compute hashes to grow the blockchain, and the longest chain is considered authoritative. PoW ensures that an adversary does not gain any advantage by creating pseudonyms. However, PoW allows the possibility of forks, where two di erent blockchains have the same length, and neither one supersedes the other. Mitigating forks requires two unfortunate sacri ces: the time to grow the chain by one block must be reasonably high (e.g., 10 minutes in Bitcoin), and applications must wait for several blocks in order to ensure their transaction remains on the authoritative chain (6 blocks are recommended in Bitcoin [7]). The result is that it takes about an hour to con rm a transaction in Bitcoin.
This paper presents Algorand, a new cryptocurrency de- signed to con rm transactions on the order of one minute. The core of Algorand uses a Byzantine agreement protocol called BA⋆ that scales to many users, which allows Algo- rand to reach consensus on a new block with low latency and without the possibility of forks. A key technique that makes BA⋆ suitable for Algorand is the use of veri able random functions (VRFs) [38] to randomly select users in a private and non-interactive way. BA⋆ was previously presented at a workshop at a high level [37], and a technical report by Chen and Micali [16] described an earlier version of Algorand.
Algorand faces three challenges. First, Algorand must avoid Sybil attacks, where an adversary creates many pseudonyms to in uence the Byzantine agreement protocol. Second, BA⋆ must scale to millions of users, which is far higher than the scale at which state-of-the-art Byzantine agreement protocols operate. Finally, Algorand must be re- silient to denial-of-service attacks, and continue to operate even if an adversary disconnects some of the users [29, 51].
Algorand addresses these challenges using several tech- niques, as follows.
Weighted users. To prevent Sybil attacks, Algorand as- signs a weight to each user. BA⋆ is designed to guarantee consensus as long as a weighted fraction (a constant greater than 2/3) of the users are honest. In Algorand, we weigh users based on the money in their account. Thus, as long as more than some fraction (over 2/3) of the money is owned by honest users, Algorand can avoid forks and double-spending. Consensus by committee. BA⋆ achieves scalability by choosing a committee—a small set of representatives randomly selected from the total set of users—to run each step of its protocol. All other users observe the protocol mes- sages, which allows them to learn the agreed-upon block. BA⋆ chooses committee members randomly among all users based on the users’ weights. This allows Algorand to ensure that a su cient fraction of committee members are honest. However, relying on a committee creates the possibility of targeted attacks against the chosen committee members.
Cryptographic sortition. To prevent an adversary from targeting committee members, BA⋆ selects committee mem- bers in a private and non-interactive way. This means that every user in the system can independently determine if they are chosen to be on the committee, by computing a func- tion (a VRF [38]) of their private key and public information from the blockchain. If the function indicates that the user is chosen, it returns a short string that proves this user’s committee membership to other users, which the user can include in his network messages. Since membership selec- tion is non-interactive, an adversary does not know which user to target until that user starts participating in BA⋆.
Participant replacement. Finally, an adversary may tar- get a committee member once that member sends a message in BA⋆. BA⋆ mitigates this attack by requiring committee members to speak just once. Thus, once a committee member sends his message (exposing his identity to an adversary), the committee member becomes irrelevant to BA⋆. BA⋆ achieves this property by avoiding any private state (except for the user’s private key), which makes all users equally capable of participating, and by electing new committee members for each step of the Byzantine agreement protocol.
We implement a prototype of Algorand and BA⋆, and use it to empirically evaluate Algorand’s performance. Experi- mental results running on 1,000 Amazon EC2 VMs demon- strate that Algorand can con rm a 1 MByte block of transac- tions in ∼22 seconds with 50,000 users, that Algorand’s la- tency remains nearly constant when scaling to half a million users, that Algorand achieves 125× the transaction through- put of Bitcoin, and that Algorand achieves acceptable latency even in the presence of actively malicious users.
